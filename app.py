# Viola Jones Video Anonymizer

import cv2
import os
import moviepy.editor as moviepy
from moviepy.video.io.VideoFileClip import VideoFileClip
from gtts import gTTS, tts
import speech_recognition as sr
from pydub import AudioSegment


'''
This function extracts the audio from the original input mp4 file and 
transcribe the audio into text and back through gTTS for a robotic anonymized voice
'''
def extract_audio(inputFileName):

    # Get initial mp4 file
    mp4_file = f'{inputFileName}.mp4'
    mp3_file = 'output.mp3'

    # Clip audio from video file
    videoClip = VideoFileClip(mp4_file)
    audioClip = videoClip.audio

    # Extract audio
    audioClip.write_audiofile(mp3_file)

    audioClip.close()
    videoClip.close()

    # convert mp3 file to wav
    sound = AudioSegment.from_mp3("output.mp3")
    sound.export("output.wav", format="wav")

    # transcribe audio file
    AUDIO_FILE = "output.wav"

    # use the audio file as the audio source
    r = sr.Recognizer()
    with sr.AudioFile(AUDIO_FILE) as source:
        audio = r.record(source)  # read the entire audio file
        transcript = r.recognize_google(audio) # Get transcript

    # Pass in transcript into google text to speech in english to get robotic voice
    texttomp3 = gTTS(text=transcript, lang='en-gb', slow=False)
    # Output gTTS generated audio as a mp3 file
    texttomp3.save("output.mp3")


'''
This function takes the original input mp4 file and overlays the Gaussian Blur face mask
using the Viola Jones Algorithm and outputs a .avi file
'''
def extract_video(inputFileName):

    # Initlaize Viola Jones Algorithm
    cascade_classifier = cv2.CascadeClassifier('haarcascade_frontalface_alt.xml')

    # Initlize Original mp4 file
    source = cv2.VideoCapture(f'{inputFileName}.mp4')

    frame_width = int(source.get(3))
    frame_height = int(source.get(4))

    size = (frame_width, frame_height)

    # Use as recording anchor for cv2 output
    result = cv2.VideoWriter('output.avi', cv2.VideoWriter_fourcc(*'MJPG'), 30, size, 1)

    # Iterate through video frames
    while True:

        # Read each frame as it's own image
        ret, img = source.read()

        # At the end of the video break the loop
        if img is None:
            break

        # Convert to grayscale as per Viola Jones Algorithm Requirements
        gray_image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        # Run Viola Jones Algorithm on image frame
        detected_faces = cascade_classifier.detectMultiScale(gray_image, scaleFactor=1.2, minNeighbors=5,
                                                             minSize=(20, 20))

        # Create bounding box dimensions for detceted faces
        for (x, y, width, height) in detected_faces:
            cv2.rectangle(img, (x, y), (x + width, y + height), (0, 0, 0), 0)

        # Apply Gaussian blur over boudning box region within frame image
        for (x, y, width, height) in detected_faces:
            topLeft = (x, y)
            bottomRight = (x + width, y + height)
            x, y = topLeft[0], topLeft[1]
            w, h = bottomRight[0] - topLeft[0], bottomRight[1] - topLeft[1]

            ROI = img[y:y + height, x:x + width]
            blur = cv2.GaussianBlur(ROI, (281, 281), 0)

            img[y:y + height, x:x + width] = blur

        # Write updated frame with Gaussian blue mask to recording anchor
        result.write(img)

    source.release()
    cv2.destroyAllWindows()


'''
This function takes the .avi file generated by extract_video() and converts it to a mp4 for merging purposes
'''
def convert_video():
    fileExists = os.path.isfile('output.avi')
    if fileExists:
        clip = moviepy.VideoFileClip('output.avi')
        clip.write_videofile('output.mp4')
    else:
        convert_video()


'''
Thus function takes the output mp3 file from extract_audio() and output mp4 file from convert_video()
and merges them into one mp4 file which is saved as output
'''
def combine_audio_video(outputFileName):

    # Command for merging mp3 and mp4 using ffmpeg
    cmd = f"ffmpeg -i output.mp4 -i output.mp3 -c:v copy -c:a aac {outputFileName}.mp4"
    os.system(cmd)
    # remove uneccessary files create through audio and video extraction processes
    os.remove('output.avi')
    os.remove('output.wav')
    os.remove('output.mp3')
    os.remove('output.mp4')


# Entry point for python file
if __name__ == '__main__':

    # Ask user for input file name
    inputFileName = input('Name input MP4 file: ')
    # Ask user for preferred output file name
    outputFileName = input('Name output MP4 file: ')

    print('Extracting and Anonymizing Audio...')
    # Get audio from input mp4 file
    extract_audio(inputFileName)
    print('Extracting and Anonymizing Video... (this may take several minutes)')
    # Get video with Gaussian blue from input mp4 file
    extract_video(inputFileName)
    convert_video()
    print('Creating Complete Video...')
    # merge outputted mp3 and mp4 file to create final anonymized video
    combine_audio_video(outputFileName)
    print(f'Process Complete. Video is saved as {outputFileName}.mp4')
